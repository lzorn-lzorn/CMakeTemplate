# 定义函数：尝试链接 OpenGL，失败则输出自定义错误信息
function(target_link_opengl_or_fail TARGET_NAME FAIL_MSG)
    find_package(OpenGL)
    if(OpenGL_FOUND)
        target_include_directories(${TARGET_NAME} PRIVATE ${OpenGL_INCLUDE_DIR})
        target_link_libraries(${TARGET_NAME} PRIVATE OpenGL::GL)
    else()
        message(FATAL_ERROR "${FAIL_MSG}")
    endif()
endfunction()

# 自动选择图形后端
find_package(Vulkan)

if (Vulkan_FOUND)
    # Vulkan_INCLUDE_DIR 在下载时同时包含了 glm/glm.hpp
    target_include_directories(${PROJECT_NAME} PRIVATE ${Vulkan_INCLUDE_DIR})
    target_link_libraries(${PROJECT_NAME} PRIVATE Vulkan::Vulkan)
else()
    if (WIN32)
        find_package(d3d12)
        if (d3d12_FOUND)
            target_include_directories(${PROJECT_NAME} PRIVATE ${d3d12_INCLUDE_DIRS})
            target_link_libraries(${PROJECT_NAME} PRIVATE d3d12)
        else()
            find_package(d3d11)
            if (d3d11_FOUND)
                target_include_directories(${PROJECT_NAME} PRIVATE ${d3d11_INCLUDE_DIRS})
                target_link_libraries(${PROJECT_NAME} PRIVATE d3d11)
            else()
                target_link_opengl_or_fail(${PROJECT_NAME} "No suitable graphics backend found: Vulkan, DirectX12, DirectX11, OpenGL")
            endif()
        endif()
    elseif (APPLE)
        find_library(METAL_FRAMEWORK Metal)
        if (METAL_FRAMEWORK)
            target_link_libraries(${PROJECT_NAME} PRIVATE "-framework Metal")
        else()
            target_link_opengl_or_fail(${PROJECT_NAME} "No suitable graphics backend found: Vulkan, Metal, OpenGL")
        endif()
    else()
        target_link_opengl_or_fail(${PROJECT_NAME} "No suitable graphics backend found: Vulkan, OpenGL")
    endif()
endif()
